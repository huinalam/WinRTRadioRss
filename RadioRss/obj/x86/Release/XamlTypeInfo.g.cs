//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace RadioRss
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::RadioRss.RadioRss_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::RadioRss.RadioRss_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::RadioRss.RadioRss_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace RadioRss.RadioRss_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            if(xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForType(type);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType == null)
            {
                xamlType = CheckOtherMetadataProvidersForName(typeName);
            }
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_ViewModelLocator() { return new global::RadioRss.ViewModel.ViewModelLocator(); }

        private object Activate_1_MainViewModel() { return new global::RadioRss.ViewModel.MainViewModel(); }

        private object Activate_3_ObservableObject() { return new global::GalaSoft.MvvmLight.ObservableObject(); }

        private object Activate_4_FunScreenMain() { return new global::RadioRss.FunScreen.FunScreenMain(); }

        private object Activate_5_MyUserControl3() { return new global::test.MyUserControl3(); }

        private object Activate_6_user3() { return new global::test.user3(); }

        private object Activate_7_user4() { return new global::test.user4(); }

        private object Activate_8_MainPage() { return new global::RadioRss.MainPage(); }

        private object Activate_9_ByTeam() { return new global::RadioRss.ViewControl.ByTeam(); }

        private object Activate_10_ChannelsListControl() { return new global::RadioRss.ViewControl.ChannelsListControl(); }

        private object Activate_11_FunScreenSettings() { return new global::RadioRss.ViewControl.FunScreenSettings(); }

        private object Activate_12_ItemsListControl() { return new global::RadioRss.ViewControl.ItemsListControl(); }

        private object Activate_13_LiveTile() { return new global::Callisto.Controls.LiveTile(); }

        private object Activate_17_LiveTileControl() { return new global::RadioRss.ViewControl.LiveTileControl(); }

        private object Activate_19_List() { return new global::System.Collections.Generic.List<global::RadioRss.Model.ControlModel.LiveTileData>(); }

        private object Activate_21_MusicPlayerControl() { return new global::RadioRss.ViewControl.MusicPlayerControl(); }

        private object Activate_22_PrivacyPolicy() { return new global::RadioRss.ViewControl.PrivacyPolicy(); }

        private object Activate_23_SelectBackground() { return new global::RadioRss.ViewControl.SelectBackground(); }

        private object Activate_24_MainCategoryPage() { return new global::RadioRss.View.MainCategoryPage(); }

        private object Activate_25_LayoutAwarePage() { return new global::RadioRss.Common.LayoutAwarePage(); }

        private object Activate_26_PodCastChannelsPage() { return new global::RadioRss.View.PodCastChannelsPage(); }

        private object Activate_27_PodCastItemsPage() { return new global::RadioRss.View.PodCastItemsPage(); }

        private void VectorAdd_19_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::RadioRss.Model.ControlModel.LiveTileData>)instance;
            var newItem = (global::RadioRss.Model.ControlModel.LiveTileData)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::RadioRss.RadioRss_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Object":
                xamlType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.Control":
                xamlType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Control));
                break;

            case "Windows.UI.Xaml.DataTemplate":
                xamlType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.DataTemplate));
                break;

            case "String":
                xamlType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.Media.ImageSource":
                xamlType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Media.ImageSource));
                break;

            case "Windows.UI.Xaml.Controls.Image":
                xamlType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Image));
                break;

            case "RadioRss.ViewModel.ViewModelLocator":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.ViewModel.ViewModelLocator), GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_ViewModelLocator;
                userType.AddMemberName("Main");
                xamlType = userType;
                break;

            case "RadioRss.ViewModel.MainViewModel":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.ViewModel.MainViewModel), GetXamlTypeByName("GalaSoft.MvvmLight.ViewModelBase"));
                userType.Activator = Activate_1_MainViewModel;
                xamlType = userType;
                break;

            case "GalaSoft.MvvmLight.ViewModelBase":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GalaSoft.MvvmLight.ViewModelBase), GetXamlTypeByName("GalaSoft.MvvmLight.ObservableObject"));
                xamlType = userType;
                break;

            case "GalaSoft.MvvmLight.ObservableObject":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GalaSoft.MvvmLight.ObservableObject), GetXamlTypeByName("Object"));
                userType.Activator = Activate_3_ObservableObject;
                xamlType = userType;
                break;

            case "RadioRss.FunScreen.FunScreenMain":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.FunScreen.FunScreenMain), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_4_FunScreenMain;
                xamlType = userType;
                break;

            case "test.MyUserControl3":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::test.MyUserControl3), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_5_MyUserControl3;
                xamlType = userType;
                break;

            case "test.user3":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::test.user3), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_6_user3;
                xamlType = userType;
                break;

            case "test.user4":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::test.user4), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_7_user4;
                xamlType = userType;
                break;

            case "RadioRss.MainPage":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_8_MainPage;
                xamlType = userType;
                break;

            case "RadioRss.ViewControl.ByTeam":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.ViewControl.ByTeam), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_9_ByTeam;
                xamlType = userType;
                break;

            case "RadioRss.ViewControl.ChannelsListControl":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.ViewControl.ChannelsListControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_10_ChannelsListControl;
                xamlType = userType;
                break;

            case "RadioRss.ViewControl.FunScreenSettings":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.ViewControl.FunScreenSettings), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_11_FunScreenSettings;
                xamlType = userType;
                break;

            case "RadioRss.ViewControl.ItemsListControl":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.ViewControl.ItemsListControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_12_ItemsListControl;
                xamlType = userType;
                break;

            case "Callisto.Controls.LiveTile":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Callisto.Controls.LiveTile), GetXamlTypeByName("Windows.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_13_LiveTile;
                userType.AddMemberName("ItemsSource");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("Direction");
                AddToMapOfTypeToStandardName(typeof(global::Callisto.Controls.LiveTile.SlideDirection),
                                                   "Callisto.Controls.LiveTile.SlideDirection");
                xamlType = userType;
                break;

            case "Callisto.Controls.LiveTile.SlideDirection":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::Callisto.Controls.LiveTile.SlideDirection), GetXamlTypeByName("System.Enum"));
                AddToMapOfTypeToStandardName(typeof(global::Callisto.Controls.LiveTile.SlideDirection),
                                                   "Callisto.Controls.LiveTile.SlideDirection");
                userType.AddEnumValue("Up", global::Callisto.Controls.LiveTile.SlideDirection.Up);
                userType.AddEnumValue("Left", global::Callisto.Controls.LiveTile.SlideDirection.Left);
                xamlType = userType;
                break;

            case "System.Enum":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Enum), GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case "System.ValueType":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.ValueType), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "RadioRss.ViewControl.LiveTileControl":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.ViewControl.LiveTileControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_17_LiveTileControl;
                userType.AddMemberName("AddLiveTile");
                AddToMapOfTypeToStandardName(typeof(global::RadioRss.Model.ControlModel.LiveTileData),
                                                   "RadioRss.Model.ControlModel.LiveTileData");
                userType.AddMemberName("AddLiveTileList");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::RadioRss.Model.ControlModel.LiveTileData>),
                                                   "System.Collections.Generic.List<RadioRss.Model.ControlModel.LiveTileData>");
                userType.AddMemberName("CategoryName");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "RadioRss.Model.ControlModel.LiveTileData":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.Model.ControlModel.LiveTileData), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::RadioRss.Model.ControlModel.LiveTileData),
                                                   "RadioRss.Model.ControlModel.LiveTileData");
                userType.AddMemberName("Name");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("Description");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("ImageUri");
                userType.AddMemberName("ReadMoreUri");
                xamlType = userType;
                break;

            case "System.Collections.Generic.List<RadioRss.Model.ControlModel.LiveTileData>":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.Generic.List<global::RadioRss.Model.ControlModel.LiveTileData>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.Generic.List<global::RadioRss.Model.ControlModel.LiveTileData>),
                                                   "System.Collections.Generic.List<RadioRss.Model.ControlModel.LiveTileData>");
                userType.Activator = Activate_19_List;
                userType.CollectionAdd = VectorAdd_19_List;
                xamlType = userType;
                break;

            case "System.Uri":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Uri), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "RadioRss.ViewControl.MusicPlayerControl":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.ViewControl.MusicPlayerControl), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_21_MusicPlayerControl;
                userType.AddMemberName("PreviewImageSource");
                userType.AddMemberName("PreviewImage");
                userType.AddMemberName("MusicUri");
                xamlType = userType;
                break;

            case "RadioRss.ViewControl.PrivacyPolicy":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.ViewControl.PrivacyPolicy), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_22_PrivacyPolicy;
                xamlType = userType;
                break;

            case "RadioRss.ViewControl.SelectBackground":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.ViewControl.SelectBackground), GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_23_SelectBackground;
                xamlType = userType;
                break;

            case "RadioRss.View.MainCategoryPage":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.View.MainCategoryPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_24_MainCategoryPage;
                xamlType = userType;
                break;

            case "RadioRss.Common.LayoutAwarePage":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.Common.LayoutAwarePage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_25_LayoutAwarePage;
                xamlType = userType;
                break;

            case "RadioRss.View.PodCastChannelsPage":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.View.PodCastChannelsPage), GetXamlTypeByName("RadioRss.Common.LayoutAwarePage"));
                userType.Activator = Activate_26_PodCastChannelsPage;
                xamlType = userType;
                break;

            case "RadioRss.View.PodCastItemsPage":
                userType = new global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::RadioRss.View.PodCastItemsPage), GetXamlTypeByName("RadioRss.Common.LayoutAwarePage"));
                userType.Activator = Activate_27_PodCastItemsPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Callisto.Callisto_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    return xamlType;
                }
            }
            return null;
        }

        private object get_0_ViewModelLocator_Main(object instance)
        {
            var that = (global::RadioRss.ViewModel.ViewModelLocator)instance;
            return that.Main;
        }
        private object get_1_LiveTile_ItemsSource(object instance)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            return that.ItemsSource;
        }
        private void set_1_LiveTile_ItemsSource(object instance, object Value)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_2_LiveTile_ItemTemplate(object instance)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            return that.ItemTemplate;
        }
        private void set_2_LiveTile_ItemTemplate(object instance, object Value)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            that.ItemTemplate = (global::Windows.UI.Xaml.DataTemplate)Value;
        }
        private object get_3_LiveTile_Direction(object instance)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            return that.Direction;
        }
        private void set_3_LiveTile_Direction(object instance, object Value)
        {
            var that = (global::Callisto.Controls.LiveTile)instance;
            that.Direction = (global::Callisto.Controls.LiveTile.SlideDirection)Value;
        }
        private object get_4_LiveTileControl_AddLiveTile(object instance)
        {
            var that = (global::RadioRss.ViewControl.LiveTileControl)instance;
            return that.AddLiveTile;
        }
        private void set_4_LiveTileControl_AddLiveTile(object instance, object Value)
        {
            var that = (global::RadioRss.ViewControl.LiveTileControl)instance;
            that.AddLiveTile = (global::RadioRss.Model.ControlModel.LiveTileData)Value;
        }
        private object get_5_LiveTileControl_AddLiveTileList(object instance)
        {
            var that = (global::RadioRss.ViewControl.LiveTileControl)instance;
            return that.AddLiveTileList;
        }
        private void set_5_LiveTileControl_AddLiveTileList(object instance, object Value)
        {
            var that = (global::RadioRss.ViewControl.LiveTileControl)instance;
            that.AddLiveTileList = (global::System.Collections.Generic.List<global::RadioRss.Model.ControlModel.LiveTileData>)Value;
        }
        private object get_6_LiveTileData_Name(object instance)
        {
            var that = (global::RadioRss.Model.ControlModel.LiveTileData)instance;
            return that.Name;
        }
        private void set_6_LiveTileData_Name(object instance, object Value)
        {
            var that = (global::RadioRss.Model.ControlModel.LiveTileData)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_7_LiveTileData_Description(object instance)
        {
            var that = (global::RadioRss.Model.ControlModel.LiveTileData)instance;
            return that.Description;
        }
        private void set_7_LiveTileData_Description(object instance, object Value)
        {
            var that = (global::RadioRss.Model.ControlModel.LiveTileData)instance;
            that.Description = (global::System.String)Value;
        }
        private object get_8_LiveTileData_ImageUri(object instance)
        {
            var that = (global::RadioRss.Model.ControlModel.LiveTileData)instance;
            return that.ImageUri;
        }
        private void set_8_LiveTileData_ImageUri(object instance, object Value)
        {
            var that = (global::RadioRss.Model.ControlModel.LiveTileData)instance;
            that.ImageUri = (global::System.Uri)Value;
        }
        private object get_9_LiveTileData_ReadMoreUri(object instance)
        {
            var that = (global::RadioRss.Model.ControlModel.LiveTileData)instance;
            return that.ReadMoreUri;
        }
        private void set_9_LiveTileData_ReadMoreUri(object instance, object Value)
        {
            var that = (global::RadioRss.Model.ControlModel.LiveTileData)instance;
            that.ReadMoreUri = (global::System.Uri)Value;
        }
        private object get_10_LiveTileControl_CategoryName(object instance)
        {
            var that = (global::RadioRss.ViewControl.LiveTileControl)instance;
            return that.CategoryName;
        }
        private void set_10_LiveTileControl_CategoryName(object instance, object Value)
        {
            var that = (global::RadioRss.ViewControl.LiveTileControl)instance;
            that.CategoryName = (global::System.String)Value;
        }
        private void set_11_MusicPlayerControl_PreviewImageSource(object instance, object Value)
        {
            var that = (global::RadioRss.ViewControl.MusicPlayerControl)instance;
            that.PreviewImageSource = (global::Windows.UI.Xaml.Media.ImageSource)Value;
        }
        private object get_12_MusicPlayerControl_PreviewImage(object instance)
        {
            var that = (global::RadioRss.ViewControl.MusicPlayerControl)instance;
            return that.PreviewImage;
        }
        private void set_12_MusicPlayerControl_PreviewImage(object instance, object Value)
        {
            var that = (global::RadioRss.ViewControl.MusicPlayerControl)instance;
            that.PreviewImage = (global::Windows.UI.Xaml.Controls.Image)Value;
        }
        private void set_13_MusicPlayerControl_MusicUri(object instance, object Value)
        {
            var that = (global::RadioRss.ViewControl.MusicPlayerControl)instance;
            that.MusicUri = (global::System.Uri)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::RadioRss.RadioRss_XamlTypeInfo.XamlMember xamlMember = null;
            global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "RadioRss.ViewModel.ViewModelLocator.Main":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.ViewModel.ViewModelLocator");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "Main", "RadioRss.ViewModel.MainViewModel");
                xamlMember.Getter = get_0_ViewModelLocator_Main;
                xamlMember.SetIsReadOnly();
                break;
            case "Callisto.Controls.LiveTile.ItemsSource":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.LiveTile");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_LiveTile_ItemsSource;
                xamlMember.Setter = set_1_LiveTile_ItemsSource;
                break;
            case "Callisto.Controls.LiveTile.ItemTemplate":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.LiveTile");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Windows.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_LiveTile_ItemTemplate;
                xamlMember.Setter = set_2_LiveTile_ItemTemplate;
                break;
            case "Callisto.Controls.LiveTile.Direction":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Callisto.Controls.LiveTile");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "Direction", "Callisto.Controls.LiveTile.SlideDirection");
                xamlMember.Getter = get_3_LiveTile_Direction;
                xamlMember.Setter = set_3_LiveTile_Direction;
                break;
            case "RadioRss.ViewControl.LiveTileControl.AddLiveTile":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.ViewControl.LiveTileControl");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "AddLiveTile", "RadioRss.Model.ControlModel.LiveTileData");
                xamlMember.Getter = get_4_LiveTileControl_AddLiveTile;
                xamlMember.Setter = set_4_LiveTileControl_AddLiveTile;
                break;
            case "RadioRss.ViewControl.LiveTileControl.AddLiveTileList":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.ViewControl.LiveTileControl");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "AddLiveTileList", "System.Collections.Generic.List<RadioRss.Model.ControlModel.LiveTileData>");
                xamlMember.Getter = get_5_LiveTileControl_AddLiveTileList;
                xamlMember.Setter = set_5_LiveTileControl_AddLiveTileList;
                break;
            case "RadioRss.Model.ControlModel.LiveTileData.Name":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.Model.ControlModel.LiveTileData");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_6_LiveTileData_Name;
                xamlMember.Setter = set_6_LiveTileData_Name;
                break;
            case "RadioRss.Model.ControlModel.LiveTileData.Description":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.Model.ControlModel.LiveTileData");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "Description", "String");
                xamlMember.Getter = get_7_LiveTileData_Description;
                xamlMember.Setter = set_7_LiveTileData_Description;
                break;
            case "RadioRss.Model.ControlModel.LiveTileData.ImageUri":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.Model.ControlModel.LiveTileData");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "ImageUri", "System.Uri");
                xamlMember.Getter = get_8_LiveTileData_ImageUri;
                xamlMember.Setter = set_8_LiveTileData_ImageUri;
                break;
            case "RadioRss.Model.ControlModel.LiveTileData.ReadMoreUri":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.Model.ControlModel.LiveTileData");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "ReadMoreUri", "System.Uri");
                xamlMember.Getter = get_9_LiveTileData_ReadMoreUri;
                xamlMember.Setter = set_9_LiveTileData_ReadMoreUri;
                break;
            case "RadioRss.ViewControl.LiveTileControl.CategoryName":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.ViewControl.LiveTileControl");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "CategoryName", "String");
                xamlMember.Getter = get_10_LiveTileControl_CategoryName;
                xamlMember.Setter = set_10_LiveTileControl_CategoryName;
                break;
            case "RadioRss.ViewControl.MusicPlayerControl.PreviewImageSource":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.ViewControl.MusicPlayerControl");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "PreviewImageSource", "Windows.UI.Xaml.Media.ImageSource");
                xamlMember.Setter = set_11_MusicPlayerControl_PreviewImageSource;
                break;
            case "RadioRss.ViewControl.MusicPlayerControl.PreviewImage":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.ViewControl.MusicPlayerControl");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "PreviewImage", "Windows.UI.Xaml.Controls.Image");
                xamlMember.Getter = get_12_MusicPlayerControl_PreviewImage;
                xamlMember.Setter = set_12_MusicPlayerControl_PreviewImage;
                break;
            case "RadioRss.ViewControl.MusicPlayerControl.MusicUri":
                userType = (global::RadioRss.RadioRss_XamlTypeInfo.XamlUserType)GetXamlTypeByName("RadioRss.ViewControl.MusicPlayerControl");
                xamlMember = new global::RadioRss.RadioRss_XamlTypeInfo.XamlMember(this, "MusicUri", "System.Uri");
                xamlMember.Setter = set_13_MusicPlayerControl_MusicUri;
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::RadioRss.RadioRss_XamlTypeInfo.XamlSystemBaseType
    {
        global::RadioRss.RadioRss_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::RadioRss.RadioRss_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::RadioRss.RadioRss_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::RadioRss.RadioRss_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


